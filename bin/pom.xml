<?xml version="1.0" encoding="UTF-8"?>

<!-- ~ Copyright 2013 multidoge.org ~ ~ Licensed under the MIT license (the 
	"License"); ~ you may not use this file except in compliance with the License. 
	~ You may obtain a copy of the License at ~ ~ http://opensource.org/licenses/mit-license.php 
	~ ~ Unless required by applicable law or agreed to in writing, software ~ 
	distributed under the License is distributed on an "AS IS" BASIS, ~ WITHOUT 
	WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. ~ See the 
	License for the specific language governing permissions and ~ limitations 
	under the License. -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.multibit</groupId>
	<artifactId>multidoge</artifactId>
	<version>0.1.8</version>
	<name>MultiDoge</name>
	<description>A Java Swing client for Dogecoin</description>
	<url>https://multidoge.org</url>
	<!-- Use "mvn clean package" to build the code packaged into a basic multidoge.jar 
		Use "mvn clean verify" before submitting a patch Use "mvn clean install" 
		to build the executable jar, installers and Mac DMG Use "mvn site:site" to 
		generate a complete website under target/site Use "mvn site:run" to run a 
		local webserver localhost:8080/index.html -->
	<licenses>
		<license>
			<name>MIT</name>
			<url>http://www.opensource.org/licenses/mit-license.php</url>
			<distribution>repo</distribution>
			<comments>A business-friendly OSS license</comments>
		</license>
	</licenses>

	<issueManagement>
		<system>GitHub</system>
		<url>https://github.com/langerhans/multidoge/issues</url>
	</issueManagement>

	<scm>
		<!-- Public read-only source -->
		<url>https://github.com/langerhans/multidoge</url>
	</scm>

	<repositories>
		<repository>
			<id>sonatype-oss-snapshot</id>
			<snapshots />
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</repository>
		<repository>
			<id>sonatype-oss-snapshot2</id>
			<snapshots />
			<url>https://oss.sonatype.org/content/groups/public</url>
		</repository>
		<!-- dogecoin-j repo -->
		<repository>
			<id>bitcoinj-release</id>
			<releases />
			<url>http://distribution.bitcoinj.googlecode.com/git/releases</url>
		</repository>
		<!-- zxing repo -->
		<repository>
			<id>mvn-adamgent</id>
			<!-- Added by Victor Skovorodnikov August 9, 2020 -->
			<url>https://mvnrepository.com/artifact/com.google.zxing/javase</url>
			<!--
			<name>Adam Gent Maven Repository</name>
			-->
			<name>MVN Repository</name>
		</repository>
		<!-- Added by Victor Skovorodnikov August 6, 2020 -->
		<repository>
			<id>local-maven-repo</id>
			<url>${basedir}/dogecoinj-alice/core/target</url>
		</repository>
	</repositories>

	<build>
		<finalName>multidoge</finalName>
		<resources>
			<!-- filter properties files e.g. version.properties -->
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.properties</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<excludes>
					<exclude>**/*.properties</exclude>
					<exclude>**/*.blockchain</exclude>
					<exclude>**/*.checkpoints</exclude>
				</excludes>
			</resource>
		</resources>
		<plugins>
			<plugin>
                                <artifactId>maven-surefire-plugin</artifactId>
                                <version>3.0.0-M5</version>
                                <configuration>
                                        <skipTests>true</skipTests>
                                </configuration>
                        </plugin>
			<!-- Standard compile to ensure Java6 is used in all environments (e.g. 
				Jenkins) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<source>13</source>
					<target>13</target>
					<showDeprecation>true</showDeprecation>
					<showWarnings>true</showWarnings>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<!-- Put izPack2app into linux staging dir for production of linux installer 
						later -->
					<execution>
						<id>unpack-shared-resources-ipack2app-linux</id>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<phase>install</phase>
						<configuration>
							<includeGroupIds>org.codehaus.izpack</includeGroupIds>
							<includeArtifactIds>izpack-standalone-compiler
							</includeArtifactIds>
							<classifier>izpack2app</classifier>
							<type>zip</type>
							<excludeTransitive>true</excludeTransitive>
							<outputDirectory>${staging.linux.dir}</outputDirectory>
						</configuration>
					</execution>

					<!-- Put izPack2app into windows staging dir for production of windows 
						installer later -->
					<execution>
						<id>unpack-shared-resources-ipack2app-windows</id>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<phase>install</phase>
						<configuration>
							<includeGroupIds>org.codehaus.izpack</includeGroupIds>
							<includeArtifactIds>izpack-standalone-compiler
							</includeArtifactIds>
							<classifier>izpack2app</classifier>
							<type>zip</type>
							<excludeTransitive>true</excludeTransitive>
							<outputDirectory>${staging.windows.dir}</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Create main executable jar - all classes -->
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.2.1</version>
				<configuration>
					<descriptors>
						<descriptor>src/assemble/exe.xml</descriptor>
					</descriptors>
					<archive>
						<manifestFile>src/main/resources/META-INF/MANIFEST.MF
						</manifestFile>
					</archive>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Proguard the executable jar file to remove unnecessary classes -->
			<plugin>
				<groupId>com.github.wvengen</groupId>
				<artifactId>proguard-maven-plugin</artifactId>
				<version>2.3.0</version>
				<executions>
					<execution>
						<id>package-with-proguard</id>
						<phase>package</phase>
						<goals>
							<goal>proguard</goal>
						</goals>
						<configuration>
							<maxMemory>256m</maxMemory>
							<attach>false</attach>
							<addMavenDescriptor>false</addMavenDescriptor>
							<proguardInclude>src/main/proguard/multidoge-exe.pro</proguardInclude>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>net.sf.proguard</groupId>
						<artifactId>proguard-base</artifactId>
						<version>6.2.2</version>
						<scope>runtime</scope>
					</dependency>
				</dependencies>
			</plugin>
			<!-- Produce staging directory with all resources used in creation of 
				the linux IzPack installer and in creation of the Mac application bundle -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>copy-resources-to-staging-linux</id>
						<phase>install</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${staging.linux.dir}</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/src/main/izpack</directory>
									<filtering>true</filtering>
									<includes>
										<include>install.xml</include>
										<include>readme.txt</include>
										<include>Unix_shortcutSpec.xml</include>
										<include>multidoge-protocol-handler.sh</include>
									</includes>
								</resource>
								<resource>
									<directory>${basedir}/src/main/resources/images</directory>
									<includes>
										<include>installerLeft.png</include>
										<include>multidoge48.png</include>
									</includes>
								</resource>
								<resource>
									<directory>src/main/resources</directory>
									<includes>
										<include>multidoge.checkpoints</include>
									</includes>
								</resource>
								<resource>
									<directory>.</directory>
									<includes>
										<include>release_notes.txt</include>
										<include>configuration.md</include>
										<include>COPYING</include>
										<include>authors.txt</include>
									</includes>
								</resource>
								<resource>
									<directory>target</directory>
									<includes>
										<include>multidoge-exe.jar</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>

					<!-- Produce staging directory with all resources used in creation of 
						the windows IzPack installer -->
					<execution>
						<id>copy-resources-to-staging-windows</id>
						<phase>install</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${staging.windows.dir}</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/src/main/izpack/windows</directory>
									<filtering>true</filtering>
									<includes>
										<include>install.xml</include>
										<include>readme.txt</include>
										<include>shortcutSpec.xml</include>
										<include>registrySpec.xml</include>
									</includes>
								</resource>
								<resource>
									<directory>${basedir}/src/main/resources/images</directory>
									<includes>
										<include>installerLeft.png</include>
										<include>multidoge.ico</include>
									</includes>
								</resource>
								<resource>
									<directory>src/main/resources</directory>
									<includes>
										<include>multidoge.checkpoints</include>
									</includes>
								</resource>
								<resource>
									<directory>.</directory>
									<includes>
										<include>release_notes.txt</include>
										<include>configuration.md</include>
										<include>COPYING</include>
										<include>authors.txt</include>
									</includes>
								</resource>
								<resource>
									<directory>target</directory>
									<includes>
										<include>multidoge.exe</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>

					<!-- produce a Mac application bundle -->
					<!-- this plugin copies a skeleton App and then copies in the resources 
						from the linux staging directory -->
					<!-- Note I have tried using http://mojo.codehaus.org/osxappbundle-maven-plugin/ 
						but cannot get extra resources into my Java directory in the app -->
					<execution>
						<id>create-skeleton-Mac-application-bundle</id>
						<phase>install</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/MultiDoge.app
							</outputDirectory>
							<resources>
								<resource>
									<!-- skeleton app including JRE -->
									<directory>src/app-resources/MultiDoge.app</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>add-Java-resources-into-application-bundle</id>
						<phase>install</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/MultiDoge.app/Contents/Resources/Java
							</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/target/staging.linux</directory>
									<includes>
										<include>multidoge-exe.jar</include>
										<include>multidoge.checkpoints</include>
										<include>release_notes.txt</include>
										<include>configuration.md</include>
										<include>COPYING</include>
										<include>authors.txt</include>
									</includes>
								</resource>
								<resource>
									<directory>${basedir}/src/main/izpack/mac</directory>
									<includes>
										<include>readme.txt</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Produce linux IzPack installer from contents of linux staging directory -->
			<plugin>
				<groupId>org.codehaus.izpack</groupId>
				<artifactId>izpack-maven-plugin</artifactId>
				<version>5.1.3</version>
				<executions>
					<!-- Linux and Windows installers disabled (Victor Skovorodnikov August 9, 2020)
					<execution>
						<id>create-linux-installer</id>
						<phase>install</phase>
						<goals>
							<goal>izpack</goal>
						</goals>
						<configuration>
							<izpackBasedir>${staging.linux.dir}</izpackBasedir>
							<installerFile>${basedir}/target/${project.build.finalName}-${project.version}-linux.jar
							</installerFile>
						</configuration>
					</execution>
					<execution>
						<id>create-windows-installer</id>
						<phase>install</phase>
						<goals>
							<goal>izpack</goal>
						</goals>
						<configuration>
							<izpackBasedir>${staging.windows.dir}</izpackBasedir>
							<installerFile>${basedir}/target/${project.build.finalName}-windows.jar
							</installerFile>
						</configuration>
					</execution>
					-->
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.codehaus.izpack</groupId>
						<artifactId>izpack-standalone-compiler</artifactId>
						<version>4.3.4</version>
					</dependency>
				</dependencies>
			</plugin>

			<!-- Build a Mac DMG -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>create-mac-dmg</id>
						<phase>install</phase>
						<configuration>
							<tasks>
								<!-- Make the JavaApplicationStub in the Mac application bundle executable 
									(it loses its 'x' permission after the copy) -->
								<chmod
									file="${basedir}/target/MultiDoge.app/Contents/MacOS/JavaApplicationStub"
									perm="777" />

								<copy todir="${basedir}/target/MultiDoge-mac/MultiDoge.app">
									<fileset dir="${basedir}/target/MultiDoge.app"
										includes="**" />
								</copy>
								<copy file="${basedir}/src/main/izpack/mac/readme.txt"
									todir="${basedir}/target/MultiDoge-mac" />

								<!-- Create Applications Symbolic link -->
								<!-- WARNING, do not remove this symbolic link by Java(ant) -->
								<exec executable="ln" os="'Mac OS X'">
									<arg
										line="-s /Applications ${basedir}/target/MultiDoge-mac/Applications" />
								</exec>

								<!-- Make the JavaAppLauncher in the MultiBit app (it loses its 'x' 
									permission after the copy) -->
								<chmod
									file="${basedir}/target/MultiDoge-mac/MultiDoge.app/Contents/MacOS/JavaApplicationStub"
									perm="777" />

								<!-- Sign the Mac app -->
								<exec executable="codesign" os="'Mac OS X'">
									<arg
										line="--sign 'Developer ID Application: James Burton' --force ${basedir}/target/MultiDoge-mac/Multidoge.app" />
								</exec>
								<!-- Verify it is signed ok -->
								<exec executable="codesign" os="'Mac OS X'">
									<arg
										line="--display --verbose=4 ${basedir}/target/MultiDoge-mac/Multidoge.app" />
								</exec>

								<!-- create a DMG file -->
								<exec executable="hdiutil" os="'Mac OS X'">
									<arg value="create" />
									<arg value="-noanyowners" />
									<arg value="-imagekey" />
									<arg value="zlib-level=9" />
									<arg value="-srcfolder" />
									<arg value="${basedir}/target/MultiDoge-mac" />
									<arg
										value="${basedir}/target/multidoge-${project.version}.dmg" />
								</exec>

								<!-- IMPORTANT! -->
								<!-- Remove symbolic link before deleting tmp dir -->
								<exec executable="rm" os="'Mac OS X'">
									<arg line="-R ${basedir}/target/MultiDoge-mac/Applications" />
								</exec>

								<!-- get rid of temporary directory -->
								<delete includeEmptyDirs="true">
									<fileset dir="${basedir}/target/MultiDoge-mac" />
								</delete>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
					<!-- Produce a Win32 exe from the multidoge-exe.jar (no Maven plugin 
						for JSmooth so drop down to ant) -->
					<!-- Disabled by Victor Skovorodnikov August 9. 2020 
					<execution>
						<id>jsmooth-installer2exe-exe</id>
						<phase>package</phase>
						<configuration>
							<tasks>
								<path id="jsmooth-classpathref">
									<pathelement
										path="src/main/jsmooth/lib/jsmoothgen.jar" />
									<pathelement
										path="src/main/jsmooth/lib/jsmoothgen-ant.jar" />
								</path>
								<taskdef name="jsmoothgen"
									classname="net.charabia.jsmoothgen.ant.JSmoothGen"
									classpathref="jsmooth-classpathref" />
								<jsmoothgen project="src/main/jsmooth/exe.jsmooth"
									skeletonroot="src/main/jsmooth/skeletons" />
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
					-->
					<!-- Produce a Win32 exe from the windows IzPack installer (no Maven 
						plugin for JSmooth so drop down to ant) -->
					<!--
					<execution>
						<id>jsmooth-installer2exe-installer</id>
						<phase>install</phase>
						<configuration>
							<tasks>
								<path id="jsmooth-classpathref">
									<pathelement
										path="src/main/jsmooth/lib/jsmoothgen.jar" />
									<pathelement
										path="src/main/jsmooth/lib/jsmoothgen-ant.jar" />
								</path>
								<taskdef name="jsmoothgen"
									classname="net.charabia.jsmoothgen.ant.JSmoothGen"
									classpathref="jsmooth-classpathref" />
								<jsmoothgen
									project="src/main/jsmooth/installer.jsmooth"
									skeletonroot="src/main/jsmooth/skeletons" />
								<move file="target/multidoge-windows.exe"
									tofile="target/multidoge-${project.version}-windows-setup.exe" />
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
					-->
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant-nodeps</artifactId>
						<version>1.8.1</version>
					</dependency>
				</dependencies>
			</plugin>
			<!-- Use the Enforcer to verify build integrity -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>3.0.0-M3</version>
				<executions>
					<execution>
						<id>enforce</id>
						<phase>verify</phase>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<digestRule
									implementation="uk.co.froot.maven.enforcer.DigestRule">

									<!-- Create a snapshot to build the list of URNs below -->
									<buildSnapshot>true</buildSnapshot>

									<!-- List of required hashes -->
									<!-- Format is URN of groupId:artifactId:version:type:classifier:scope:hash -->
									<!-- classifier is "null" if not present -->
									<urns>
										<urn>ch.qos.logback:logback-classic:1.0.9:jar:null:compile:258c3d8f956e7c8723f13fdea6b81e3d74201f68</urn>
										<urn>ch.qos.logback:logback-core:1.0.9:jar:null:compile:41916886a1df068ad1dfea9bcc649a7b8ea4553e</urn>
										<urn>com.fasterxml.jackson.core:jackson-annotations:2.1.1:jar:null:compile:0b01cc83e745fc4425a3968fafbf8e5b8254a6dd</urn>
										<urn>com.fasterxml.jackson.core:jackson-core:2.1.1:jar:null:compile:82ad1c5f92f6dcc6291f5c46ebacb975eaa844de</urn>
										<urn>com.fasterxml.jackson.core:jackson-databind:2.1.1:jar:null:compile:38d2b3c0c89af5b937fd98c3e558bf6b58c14aa2</urn>
										<urn>com.github.mmazi:rescu:1.1.0:jar:null:compile:f28cdef5ddfa743e2f925f4aa2beb618d19fb23a</urn>
										<urn>com.google.code.findbugs:jsr305:1.3.9:jar:null:compile:40719ea6961c0cb6afaeb6a921eaa1f6afd4cfdf</urn>
										<urn>com.google.guava:guava:13.0.1:jar:null:compile:0d6f22b1e60a2f1ef99e22c9f5fde270b2088365</urn>
										<urn>com.google.protobuf:protobuf-java:3.12.4:jar:null:compile:61ee049ef4f156238117fa93f23a720962717ccf</urn>
										<urn>com.google.zxing:core:3.4.0:jar:null:compile:5264296c46634347890ec9250bc65f14b7362bf8</urn>
										<urn>com.google.zxing:javase:3.4.0:jar:null:compile:8be20100f28515037a31cc0bbe557501c0538147</urn>
										<urn>com.lambdaworks:scrypt:1.3.2:jar:null:compile:b144d80b2b915a900730dd156ae749a88c0e2555</urn>
										<urn>com.madgag:sc-light-jdk15on:1.47.0.2:jar:null:compile:d5c98671cc97fa0d928be1c7eb5edd3fb95d3234</urn>
										<urn>com.toedter:jcalendar:1.3.2:jar:null:compile:323a672aeacb5f5f4461be3b7f7d9d3e4bda80d4</urn>
										<urn>com.xeiam.xchange:xchange-bitstamp:1.9.0:jar:null:compile:72e1badf201bd35a3931cbd8a9441bb63ed20c15</urn>
										<urn>com.xeiam.xchange:xchange-btcchina:1.9.0:jar:null:compile:634976192b7bcfbe7f8da6acbd9d4f1ca4c9e388</urn>
										<urn>com.xeiam.xchange:xchange-btce:1.9.0:jar:null:compile:75ded406c53e36149218d35bd9ac589ddb22819c</urn>
										<urn>com.xeiam.xchange:xchange-campbx:1.9.0:jar:null:compile:e51ad4b61a8481de74e86791c014aa66787226ba</urn>
										<urn>com.xeiam.xchange:xchange-cavirtex:1.9.0:jar:null:compile:7bc0ef91d796ae56fca760a3e4f7e9e99b1c255a</urn>
										<urn>com.xeiam.xchange:xchange-core:1.9.0:jar:null:compile:7af6544e86927d4fe927479be917cf6362119766</urn>
										<urn>com.xeiam.xchange:xchange-kraken:1.9.0:jar:null:compile:88c89163c9a630e69927dec2bf98d4df55e7a50d</urn>
										<urn>com.xeiam.xchange:xchange-mtgox:1.9.0:jar:null:compile:39d115914439a8fe334af6bebf78bb499fa8bb61</urn>
										<urn>com.xeiam.xchange:xchange-openexchangerates:1.9.0:jar:null:compile:ec35f83827d88bd5cfd90ae9dad39437bcb48313</urn>
										<urn>com.xeiam.xchart:xchart:2.2.0:jar:null:compile:3e3d4f50597c0b64b12c1c5eec335e940dce9501</urn>
										<urn>commons-codec:commons-codec:1.4:jar:null:compile:4216af16d38465bbab0f3dff8efa14204f7a399a</urn>
										<urn>io.netty:netty:3.6.3.Final:jar:null:compile:1eebfd2f79dd72c44d09d9917c549c60322462b8</urn>
										<urn>javax.ws.rs:jsr311-api:1.1.1:jar:null:compile:59033da2a1afd56af1ac576750a8d0b1830d59e6</urn>
										<urn>joda-time:joda-time:2.1:jar:null:compile:8f79e353ef77da6710e1f10d34fc3698eaaacbca</urn>
										<urn>junit:junit:4.8.2:jar:null:test:c94f54227b08100974c36170dcb53329435fe5ad</urn>
										<urn>net.jcip:jcip-annotations:1.0:jar:null:compile:afba4942caaeaf46aab0b976afd57cc7c181467e</urn>
										<urn>org.apache.maven.plugins:maven-antrun-plugin:3.0.0:maven-plugin:null:runtime:563dea4c33cd57c9a9b12bddd3b082fba67165b5</urn>
										<urn>org.apache.maven.plugins:maven-assembly-plugin:2.2.1:maven-plugin:null:runtime:701da181eb3d2976ad900e4b58f48101c4d7f25a</urn>
										<urn>org.apache.maven.plugins:maven-clean-plugin:2.4.1:maven-plugin:null:runtime:c3ad1d9e5ee3daeac15f8e18e987a214bbaa343a</urn>
										<urn>org.apache.maven.plugins:maven-compiler-plugin:3.8.1:maven-plugin:null:runtime:be834db00dbace3d7fd08a6e0e96ab5e4af45f99</urn>
										<urn>org.apache.maven.plugins:maven-dependency-plugin:3.1.2:maven-plugin:null:runtime:d302dfb35606fc9616cab602fc062dc95d03cb30</urn>
										<urn>org.apache.maven.plugins:maven-deploy-plugin:3.0.0-M1:maven-plugin:null:runtime:03f0e4ad61782e0d68306422d62cf052b58be174</urn>
										<urn>org.apache.maven.plugins:maven-enforcer-plugin:3.0.0-M3:maven-plugin:null:runtime:c45ecb8536cb08cf2c5e0852465623e846ade760</urn>
										<urn>org.apache.maven.plugins:maven-install-plugin:3.0.0-M1:maven-plugin:null:runtime:c21aa5f091c9e5f7d0c064b92f67c1b72444d04c</urn>
										<urn>org.apache.maven.plugins:maven-jar-plugin:3.2.0:maven-plugin:null:runtime:3d0c701677e8be0065ab7cbef023d04793a3a1fe</urn>
										<urn>org.apache.maven.plugins:maven-resources-plugin:3.1.0:maven-plugin:null:runtime:1b10443dbf8440d1740fc54c6313fda23a1a607f</urn>
										<urn>org.apache.maven.plugins:maven-site-plugin:3.0:maven-plugin:null:runtime:39e1d8d4dae56f948e0028890c426c2002331e8c</urn>
										<urn>org.apache.maven.plugins:maven-surefire-plugin:3.0.0-M5:maven-plugin:null:runtime:fdd1eeae1523a8d4b955613eb282d3fc51bc9868</urn>
										<urn>org.codehaus.izpack:izpack-maven-plugin:5.1.3:maven-plugin:null:runtime:91b72507d4f384c60dd62528384b9f04a207cd96</urn>
										<urn>org.codehaus.izpack:izpack:5.0.0-beta8:pom:null:compile:4d7aa42807ef2f36a0289941271d984d049325c3</urn>
										<urn>org.codehaus.jackson:jackson-core-asl:1.9.5:jar:null:compile:af39988dc5ec30dba5f327791676d67501e79f93</urn>
										<urn>org.codehaus.jackson:jackson-mapper-asl:1.9.5:jar:null:compile:a731291051b447bbf8da50f232688e34d3d1d53c</urn>
										<urn>org.java-websocket:Java-WebSocket:1.3.0:jar:null:compile:db2658f013fb163de4a99274c2eb9e17efe535d2</urn>
										<urn>org.joda:joda-money:0.8:jar:null:compile:29e5cdf8cb4af8fffb0b013b1dc63d493cb02115</urn>
										<urn>org.simplericity.macify:macify:1.6:jar:null:compile:969fedd5d187e92bec18cf4a88cf82fa9668c8d3</urn>
										<urn>org.slf4j:slf4j-api:1.6.2:jar:null:compile:8619e95939167fb37245b5670135e4feb0ec7d50</urn>

										<!-- A check for the rules themselves -->
										<urn>uk.co.froot.maven.enforcer:digest-enforcer-rules:0.0.1:jar:null:runtime:16a9e04f3fe4bb143c42782d07d5faf65b32106f</urn>
									</urns>
								</digestRule>
							</rules>
						</configuration>
					</execution>
				</executions>

				<!-- Ensure we download the enforcer rules -->
				<dependencies>
					<dependency>
						<groupId>uk.co.froot.maven.enforcer</groupId>
						<artifactId>digest-enforcer-rules</artifactId>
						<version>0.0.1</version>
					</dependency>
				</dependencies>

			</plugin>
		</plugins>
	</build>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.2</version>
			<type>jar</type>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.2</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.0.9</version>
			<scope>compile</scope>
		</dependency>
		<!-- spongycastle used by bitcoinj clones -->
		<dependency>
			<groupId>com.madgag</groupId>
			<artifactId>sc-light-jdk15on</artifactId>
			<version>${sc-light-jdk15on.version}</version>
		</dependency>
		<!-- zxing used for QR codes -->
		<dependency>
			<groupId>com.google.zxing</groupId>
			<artifactId>javase</artifactId>
			<version>3.4.0</version>
		</dependency>
		<!-- Added by Victor Skovorodnikov August 9, 2020 -->
		<dependency>
    			<groupId>com.google.zxing</groupId>
    			<artifactId>core</artifactId>
    			<version>3.4.0</version>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava-base</artifactId>
			<version>r03</version>
		</dependency>
		<dependency>
			<groupId>org.simplericity.macify</groupId>
			<artifactId>macify</artifactId>
			<version>1.6</version>
		</dependency>
		<!-- Disabled by Victor Skovorodnikov August 7, 2020 <dependency> <groupId>com.google</groupId> 
			<artifactId>dogecoinj-core</artifactId> <version>${bitcoinj.version}</version> 
			<scope>compile</scope> </dependency> -->
		<!-- Added by Victor Skovorodnikov August 10, 2020 -->
                <dependency>
                        <groupId>org.jboss.netty</groupId>
                        <artifactId>netty</artifactId>
                        <version>3.2.10.Final</version>
                </dependency>
		<!-- Added by Victor Skovorodnikov August 7, 2020 -->
		<dependency>
			<groupId>com.google</groupId>
			<artifactId>dogecoinj-parent</artifactId>
			<version>0.6-SNAPSHOT</version>
			<scope>system</scope>
			<systemPath>${basedir}/dogecoinj-alice/core/target/dogecoinj-core-0.6-SNAPSHOT.jar</systemPath>
		</dependency>

		<!-- Added by Victor Skovorodnikov August 7, 2020 -->

		<dependency>
			<groupId>com.google</groupId>
			<artifactId>bitcoinj</artifactId>
			<version>0.11.3</version>
		</dependency>

		<!-- Added by Victor Skovorodnikov August 7, 2020 -->
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>3.12.4</version>
		</dependency>

		<dependency>
			<groupId>com.xeiam.xchange</groupId>
			<artifactId>xchange-core</artifactId>
			<version>${xchange.version}</version>
		</dependency>
		<!-- XChange Poloniex exchange support -->
		<dependency>
			<groupId>com.xeiam.xchange</groupId>
			<artifactId>xchange-poloniex</artifactId>
			<version>${xchange.version}</version>
		</dependency>
		<dependency>
			<groupId>com.xeiam.xchange</groupId>
			<artifactId>xchange-bitcoinaverage</artifactId>
			<version>${xchange.version}</version>
		</dependency>
		<dependency>
			<groupId>com.xeiam.xchart</groupId>
			<artifactId>xchart</artifactId>
			<version>2.2.1</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.izpack</groupId>
			<artifactId>izpack</artifactId>
			<version>5.0.0-beta8</version>
			<type>pom</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.4</version>
		</dependency>
		<dependency>
			<groupId>com.toedter</groupId>
			<artifactId>jcalendar</artifactId>
			<version>1.3.2</version>
		</dependency>
		<!-- All time handling is through Joda Time -->
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>2.1</version>
		</dependency>
		<!-- All money handling is through Joda Money -->
		<dependency>
			<groupId>org.joda</groupId>
			<artifactId>joda-money</artifactId>
			<version>0.8</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.5</version>
		</dependency>
		<dependency>
			<groupId>com.lambdaworks</groupId>
			<artifactId>scrypt</artifactId>
			<version>1.3.2</version>
		</dependency>
		<dependency>
			<groupId>com.googlecode.jcsv</groupId>
			<artifactId>jcsv</artifactId>
			<version>1.4.0</version>
		</dependency>
		<!-- Replaced javafx repository with org.openjfx https://mvnrepository.com/artifact/org.openjfx/javafx 
			Victor Skovorodnikov August 6, 2020 -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx</artifactId>
			<version>11-ea+25</version>
			<type>pom</type>
		</dependency>
		<!-- <dependency> <groupId>com.oracle</groupId> <artifactId>javafx</artifactId> 
			<version>2.2.40</version> <systemPath>${java.home}/lib/ext/jfxrt.jar</systemPath> 
			<scope>system</scope> </dependency> -->
	</dependencies>

	<reporting>
		<plugins>
			<!-- Generate cross-referenced HTML source code listing -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>2.1</version>
			</plugin>
		</plugins>
	</reporting>

	<properties>
		<!-- Source encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Location of staging directory for creation of linux IzPack installer -->
		<staging.linux.dir>${project.build.directory}
		</staging.linux.dir>

		<!-- Version of BitCoinJ to use (multiple uses) -->
		<bitcoinj.version>0.10.3-MB-ALICE</bitcoinj.version>

		<!-- Version of XChange to use (multiple uses) -->
		<xchange.version>3.0.0</xchange.version>

		<!-- Version of spongycastle to use -->
		<sc-light-jdk15on.version>1.47.0.2</sc-light-jdk15on.version>

		<!-- Location of staging directory for creation of windows IzPack installer -->
		<staging.windows.dir>${project.build.directory}/staging.windows
		</staging.windows.dir>
	</properties>
</project>
